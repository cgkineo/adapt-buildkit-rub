var Action = require("../libraries/Action.js");

var stringreplacement = new Action({

    initialize: function() {

        this.deps(global, {
            "fsext": "../libraries/fsext.js",
            "logger": "../libraries/logger.js",
            "fs": "fs",
            "path": "path",
            "_": "underscore",
            "hbs": "handlebars"
        });

    },

    perform: function(options, done, started) {
        started();
        
        if (options.root === undefined) options.root = "";
        
        options.root = fsext.replace(options.root, options);
        options.root = fsext.expand(options.root);
        options.dest = fsext.replace(options.dest, options);
        options.dest = fsext.expand(options.dest);

        var json = {};
        for (var k in options.json) {
            var filePath = fsext.replace(options.json[k], options);
            filePath = fsext.expand(filePath);
            json[k] = JSON.parse(fs.readFileSync(filePath).toString());
        }
        options.json = json;

        options.context = fsext.replace(options.context, options);
        options.context = fsext.expand(options.context);

        var srcPath = path.join(options.root, options.src);

        if (fs.existsSync(srcPath)) {

            var globs = [].concat(options.globs);
            if (options.exclusionGlobs) {
                globs = globs.concat(options.exclusionGlobs);
            }

            var list = fsext.glob(srcPath, globs);
            if (list.length > 0) {
                var filePath = list[0]+"";
                var isFileExists = fs.existsSync(filePath);
                if (isFileExists) {
                    var fileAsString = fs.readFileSync(filePath).toString();
                    var contextAsString = fs.readFileSync(options.context).toString();
                    var contextAsJSON = JSON.parse(contextAsString);
                    
                    if (options.json.config._spoor._imsmanifest) {
                        var manifest = options.json.config._spoor._imsmanifest;

                        fileAsString = fileAsString
                            .replace(/adapt_manifest/g, "adapt_manifest_"+ manifest._id)
                            .replace(/adapt_scorm/g,"adapt_scorm_"+ manifest._id)
                            .replace(/Adapt SCORM/g, manifest._title)
                            .replace(/Responsive SCORM generated by the Adapt Learning Framework/g, manifest._description);
                    }
                    
                    var template = hbs.compile(fileAsString);
                    var output = template(contextAsJSON);

                    fs.writeFileSync(options.dest, output);
                }
            }
        }
        done(options);
    }
    
});

module.exports = stringreplacement;
